generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model organization {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar
  type             organization_type?
  business_number  String?            @db.VarChar
  address          String?            @db.VarChar
  city             String?            @db.VarChar
  postcode         Int?
  phone            BigInt?
  email            String?            @db.VarChar
  created_at       DateTime?          @db.Timestamp(6)
  updated_at       DateTime?          @db.Timestamp(6)
  modified_by_user Int?
  user             user[]
  report           report[]
}

model user {
  id               Int           @id @default(autoincrement())
  firstname        String        @db.VarChar
  lastname         String        @db.VarChar
  email            String?
  hashpassword     String?       @db.VarChar
  role             String?       @db.VarChar
  username         String        @unique @db.VarChar
  password_salt    String        @db.VarChar
  language_id      Int?
  created_at       DateTime?     @db.Timestamp(6)
  updated_at       DateTime?     @db.Timestamp(6)
  modified_by_user Int?
  organization_id  Int?
  organization     organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model report {
  id                   Int               @id @default(autoincrement())
  registeration_number String?
  production_number    Int?
  brand_and_model      String?
  odometer_reading     Int?
  created_at           DateTime?         @default(now()) @db.Timestamp(6)
  updated_at           DateTime?         @default(now()) @db.Timestamp(6)
  modified_by_user     Int?
  organization_id      Int?
  organization         organization?     @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  report_rows          report_row[]
  engine_type          engine_type?
}

model report_row {
  id                   Int               @id @default(autoincrement())
  report_id            Int?
  report               report?           @relation(fields: [report_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  question_id          Int?              @unique
  question             question?         @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inspection_status    inspection_status?
  comment              String?
  created_at           DateTime?         @default(now()) @db.Timestamp(6)
  updated_at           DateTime?         @default(now()) @db.Timestamp(6)
  modified_by_user     Int?
  attachments          attachments[]
}

model attachments {
  id              Int       @id @default(autoincrement())
  data            Bytes?
  attachment_type attachment_type?
  report_row      report_row @relation(fields: [report_row_id], references: [id])
  report_row_id   Int
} 

model question {
  id               Int                @id @unique
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  question_map     question_mapping[]
  translations_id  Int?               @unique
  traslations      translations?      @relation(fields: [translations_id], references: [id])
  report_row       report_row? 
}

model section {
  id           Int        @id @unique
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  question_map     question_mapping[]
  translations_id Int?   @unique 
  traslations      translations?    @relation(fields: [translations_id], references: [id])
}

model question_mapping {
  id          Int       @id @default(autoincrement())     
  engine_type engine_type
  report_type report_type
  section_id   Int  
  question_id  Int  
  section     section   @relation(fields: [section_id], references: [id])
  question    question  @relation(fields: [question_id], references: [id])


}

model translations {
  id           Int        @id @default(autoincrement())
  finnish_text String?
  english_text String?
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  question     question?
  section      section?
}


enum inspection_status {
  red 
  yellow
  green
}

enum organization_type {
  maintenance
  seller
  inspection
  repair
}

enum engine_type {
  petrol
  diesel
  hybrid
  hybrid_diesel
  hybrid_gasoline
  electric
}

enum report_type {
  full
  narrow
  light
}

enum attachment_type {
  image
  audio
}

